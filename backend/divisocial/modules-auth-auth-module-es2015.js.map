{"version":3,"sources":["./src/app/modules/auth/auth.module.ts","./src/app/modules/auth/login/login.component.ts","./src/app/modules/auth/login/login.component.html","./src/app/modules/auth/sign-up/sign-up.component.ts","./src/app/modules/auth/sign-up/sign-up.component.html"],"names":[],"mappings":"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","file":"modules-auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { SignUpComponent } from './sign-up/sign-up.component';\nimport { MaterialModule } from '../../material/material.module';\nimport { FormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'signup', component: SignUpComponent },\n];\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [LoginComponent, SignUpComponent],\n  exports: [RouterModule]\n})\nexport class AuthModule { }\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\nimport { isLoadingAuth } from 'src/app/store/reducers/auth.reducer';\nimport { User } from '../../../model/auth.interface';\nimport { loginRequest } from '../../../store/actions/auth.actions';\nimport { AppState } from '../../../store/app.state';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n\n  isLoading = false;\n  loadingSub: Subscription;\n\n  constructor(private store: Store<AppState>) { }\n\n  ngOnDestroy(): void {\n    this.loadingSub.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.loadingSub = this.store\n      .select(isLoadingAuth)\n      .subscribe(loading => this.isLoading = loading);\n  }\n\n  onLogin(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n    const userForm: User = {\n      email: form.value.email,\n      password: form.value.password\n    };\n    this.store.dispatch(loginRequest({ payload: userForm }));\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-md-6 m-auto\">\n      <mat-card class=\"mat-elevation-z10\">\n        <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n        <form (submit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\" *ngIf=\"!isLoading\">\n          <mat-form-field>\n            <input matInput name=\"email\" ngModel type=\"email\" placeholder=\"E-Mail\" #emailInput=\"ngModel\" required email>\n            <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\n          </mat-form-field>\n          <mat-form-field>\n            <input type=\"password\" name=\"password\" ngModel matInput placeholder=\"Password\" #passwordInput=\"ngModel\"\n              required>\n            <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\n          </mat-form-field>\n          <button mat-raised-button color=\"accent\" type=\"submit\" *ngIf=\"!isLoading\">Login</button>\n        </form>\n      </mat-card>\n    </div>\n\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\nimport { isLoadingAuth } from 'src/app/store/reducers/auth.reducer';\nimport { User } from '../../../model/auth.interface';\nimport { createUserRequest } from '../../../store/actions/auth.actions';\nimport { AppState } from '../../../store/app.state';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss']\n})\nexport class SignUpComponent implements OnInit, OnDestroy {\n\n  isLoading = false;\n  loadingSub: Subscription;\n\n  constructor(private store: Store<AppState>) { }\n\n  ngOnInit() {\n    this.loadingSub = this.store\n      .select(isLoadingAuth)\n      .subscribe(loading => this.isLoading = loading);\n  }\n\n  ngOnDestroy(): void {\n    this.loadingSub.unsubscribe();\n  }\n\n  onSignup(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n    const userForm: User = {\n      email: form.value.email,\n      password: form.value.password\n    };\n    this.store.dispatch(createUserRequest({ payload: userForm }));\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-md-6 m-auto\">\n      <mat-card class=\"mat-elevation-z10\">\n        <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n        <form (submit)=\"onSignup(signupForm)\" #signupForm=\"ngForm\" *ngIf=\"!isLoading\">\n          <mat-form-field>\n            <input matInput name=\"email\" ngModel type=\"email\" placeholder=\"E-Mail\" #emailInput=\"ngModel\" required email>\n            <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email.</mat-error>\n          </mat-form-field>\n          <mat-form-field>\n            <input type=\"password\" name=\"password\" ngModel matInput placeholder=\"Password\" #passwordInput=\"ngModel\"\n              required>\n            <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password.</mat-error>\n          </mat-form-field>\n          <button mat-raised-button color=\"accent\" type=\"submit\" *ngIf=\"!isLoading\">Signup</button>\n        </form>\n      </mat-card>\n    </div>\n  </div>\n</div>\n"],"sourceRoot":"webpack:///"}