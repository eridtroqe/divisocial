{"version":3,"sources":["./src/app/modules/create-post/create-post.component.ts","./src/app/modules/create-post/create-post.component.html","./src/app/modules/create-post/create-post.module.ts"],"names":[],"mappings":"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","file":"modules-create-post-create-post-module-es2015.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState } from '../../store/app.state';\nimport { getFailed, getProgress, getReady, isLoadingPost, getInProgress } from '../../store/reducers/post.reducer';\nimport { PostsService } from '../../endpoint/posts.service';\nimport { Post } from '../../model/auth.interface';\nimport { addPostRequest } from 'src/app/store/actions/post.actions';\n\n@Component({\n  selector: 'app-create-post',\n  templateUrl: './create-post.component.html',\n  styleUrls: ['./create-post.component.scss']\n})\nexport class CreatePostComponent implements OnInit, OnDestroy {\n\n  post: Post;\n  isLoading = false;\n  form: FormGroup;\n  imagePreview = [];\n  filesToUpload: Array<File> = [];\n  isInProgress$: Observable<boolean>;\n  isReady$: Observable<boolean>;\n  hasFailed$: Observable<boolean>;\n  isLoading$: Observable<boolean>;\n  progress$: Observable<number>;\n  error$: Observable<string>;\n\n  constructor(\n    public postsService: PostsService,\n    private fb: FormBuilder,\n    public route: ActivatedRoute,\n    private store: Store<AppState>\n  ) {\n\n    this.progress$ = this.store.select(getProgress);\n    this.isInProgress$ = this.store.select(getInProgress);\n    this.isReady$ = this.store.select(getReady);\n    this.hasFailed$ = this.store.select(getFailed);\n    this.isLoading$ = this.store.select(isLoadingPost);\n  }\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      title: ['', Validators.required],\n      content: ['', Validators.required],\n      imagePath: [[], Validators.required]\n    });\n\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files;\n    const fileArray = Array.from(file);\n    if (file === undefined) { return; }\n\n    for (const fil of fileArray) {\n      this.form.get('imagePath').updateValueAndValidity();\n      this.filesToUpload.push(fil);\n      this.form.patchValue({ imagePath: fil });\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.imagePreview = [...this.imagePreview, reader.result];\n      };\n      reader.readAsDataURL(fil);\n    }\n  }\n\n  onSavePost() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n\n    const post: Post = {\n      title: this.form.value.title,\n      content: this.form.value.content\n    };\n    console.log('this.form.value', this.form.value);\n    console.log('filesToUpload.', this.filesToUpload);\n    this.store.dispatch(addPostRequest({ payload: post, imagePath: this.filesToUpload }));\n    this.form.reset();\n  }\n\n  ngOnDestroy() {\n  }\n\n}\n","<div class=\"containre\">\n  <div class=\"row\">\n    <div class=\"col-md-6 m-auto\">\n      <mat-card>\n        <form [formGroup]=\"form\" (submit)=\"onSavePost()\">\n          <mat-form-field>\n            <input matInput type=\"text\" formControlName=\"title\" placeholder=\"Post Title\">\n            <mat-error *ngIf=\"form.get('title').invalid\">Please enter a post title.</mat-error>\n          </mat-form-field>\n          <ng-container *ngIf=\"(isInProgress$ | async) && progress$ | async as progress\">\n            <mat-progress-bar class=\"mb-1\" [value]=\"progress\"></mat-progress-bar>\n            <div class=\"text-center\"> {{progress }} %</div>\n          </ng-container>\n          <div style=\"margin-bottom: 1rem;\" *ngIf=\"(isReady$ | async) || (hasFailed$ | async)\">\n            <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">Choose images</button>\n            <input type=\"file\" multiple #filePicker (change)=\"onImagePicked($event)\">\n          </div>\n          <div class=\"image-preview\" *ngIf=\"imagePreview !== [] && imagePreview\">\n            <img *ngFor='let url of imagePreview' [src]=\"url\" height=\"150\" width=\"200px\" style=\"margin: 3px;\"\n              [alt]=\"form.value.title\">\n          </div>\n          <mat-form-field>\n            <textarea matInput rows=\"4\" formControlName=\"content\" placeholder=\"Post Content\"></textarea>\n            <mat-error *ngIf=\"form.get('content').invalid\">Please enter a post title.</mat-error>\n          </mat-form-field>\n          <button mat-raised-button color=\"accent\" type=\"submit\">Save Post</button>\n        </form>\n      </mat-card>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CreatePostComponent } from './create-post.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MaterialModule } from 'src/app/material/material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n  { path: '', component: CreatePostComponent }\n];\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [CreatePostComponent]\n})\nexport class CreatePostModule { }\n"],"sourceRoot":"webpack:///"}