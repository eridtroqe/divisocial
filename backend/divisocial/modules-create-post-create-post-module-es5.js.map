{"version":3,"sources":["webpack:///src/app/modules/create-post/create-post.component.ts","webpack:///src/app/modules/create-post/create-post.component.html","webpack:///src/app/modules/create-post/create-post.module.ts"],"names":["CreatePostComponent","postsService","fb","route","store","isLoading","imagePreview","filesToUpload","progress$","select","isInProgress$","isReady$","hasFailed$","isLoading$","form","group","title","required","content","imagePath","event","file","target","files","fileArray","Array","from","undefined","fil","get","updateValueAndValidity","push","patchValue","reader","FileReader","onload","result","readAsDataURL","invalid","post","value","console","log","dispatch","payload","reset","onSavePost","selector","templateUrl","styleUrls","routes","path","component","CreatePostModule","forChild","imports","declarations"],"mappings":"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","file":"modules-create-post-create-post-module-es5.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState } from '../../store/app.state';\nimport { getFailed, getProgress, getReady, isLoadingPost, getInProgress } from '../../store/reducers/post.reducer';\nimport { PostsService } from '../../endpoint/posts.service';\nimport { Post } from '../../model/auth.interface';\nimport { addPostRequest } from 'src/app/store/actions/post.actions';\n\n@Component({\n  selector: 'app-create-post',\n  templateUrl: './create-post.component.html',\n  styleUrls: ['./create-post.component.scss']\n})\nexport class CreatePostComponent implements OnInit, OnDestroy {\n\n  post: Post;\n  isLoading = false;\n  form: FormGroup;\n  imagePreview = [];\n  filesToUpload: Array<File> = [];\n  isInProgress$: Observable<boolean>;\n  isReady$: Observable<boolean>;\n  hasFailed$: Observable<boolean>;\n  isLoading$: Observable<boolean>;\n  progress$: Observable<number>;\n  error$: Observable<string>;\n\n  constructor(\n    public postsService: PostsService,\n    private fb: FormBuilder,\n    public route: ActivatedRoute,\n    private store: Store<AppState>\n  ) {\n\n    this.progress$ = this.store.select(getProgress);\n    this.isInProgress$ = this.store.select(getInProgress);\n    this.isReady$ = this.store.select(getReady);\n    this.hasFailed$ = this.store.select(getFailed);\n    this.isLoading$ = this.store.select(isLoadingPost);\n  }\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      title: ['', Validators.required],\n      content: ['', Validators.required],\n      imagePath: [[], Validators.required]\n    });\n\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files;\n    const fileArray = Array.from(file);\n    if (file === undefined) { return; }\n\n    for (const fil of fileArray) {\n      this.form.get('imagePath').updateValueAndValidity();\n      this.filesToUpload.push(fil);\n      this.form.patchValue({ imagePath: fil });\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.imagePreview = [...this.imagePreview, reader.result];\n      };\n      reader.readAsDataURL(fil);\n    }\n  }\n\n  onSavePost() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n\n    const post: Post = {\n      title: this.form.value.title,\n      content: this.form.value.content\n    };\n    console.log('this.form.value', this.form.value);\n    console.log('filesToUpload.', this.filesToUpload);\n    this.store.dispatch(addPostRequest({ payload: post, imagePath: this.filesToUpload }));\n    this.form.reset();\n  }\n\n  ngOnDestroy() {\n  }\n\n}\n","<div class=\"containre\">\n  <div class=\"row\">\n    <div class=\"col-md-6 m-auto\">\n      <mat-card>\n        <form [formGroup]=\"form\" (submit)=\"onSavePost()\">\n          <mat-form-field>\n            <input matInput type=\"text\" formControlName=\"title\" placeholder=\"Post Title\">\n            <mat-error *ngIf=\"form.get('title').invalid\">Please enter a post title.</mat-error>\n          </mat-form-field>\n          <ng-container *ngIf=\"(isInProgress$ | async) && progress$ | async as progress\">\n            <mat-progress-bar class=\"mb-1\" [value]=\"progress\"></mat-progress-bar>\n            <div class=\"text-center\"> {{progress }} %</div>\n          </ng-container>\n          <div style=\"margin-bottom: 1rem;\" *ngIf=\"(isReady$ | async) || (hasFailed$ | async)\">\n            <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">Choose images</button>\n            <input type=\"file\" multiple #filePicker (change)=\"onImagePicked($event)\">\n          </div>\n          <div class=\"image-preview\" *ngIf=\"imagePreview !== [] && imagePreview\">\n            <img *ngFor='let url of imagePreview' [src]=\"url\" height=\"150\" width=\"200px\" style=\"margin: 3px;\"\n              [alt]=\"form.value.title\">\n          </div>\n          <mat-form-field>\n            <textarea matInput rows=\"4\" formControlName=\"content\" placeholder=\"Post Content\"></textarea>\n            <mat-error *ngIf=\"form.get('content').invalid\">Please enter a post title.</mat-error>\n          </mat-form-field>\n          <button mat-raised-button color=\"accent\" type=\"submit\">Save Post</button>\n        </form>\n      </mat-card>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CreatePostComponent } from './create-post.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MaterialModule } from 'src/app/material/material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n  { path: '', component: CreatePostComponent }\n];\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [CreatePostComponent]\n})\nexport class CreatePostModule { }\n"]}